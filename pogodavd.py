import logging
import json
import os
import requests
import random
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ReplyKeyboardMarkup, ReplyKeyboardRemove, Message, CallbackQuery
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from transliterate import translit
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(os.path.expanduser("bot.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENWEATHER_API_KEY = "062c1bf030a998d316af4f3da0a412f6"  # –î–µ–π—Å—Ç–≤—É—é—â–∏–π API-–∫–ª—é—á
SETTINGS_FILE = os.path.expanduser("settings.json")
COORDINATES_FILE = os.path.expanduser("coordinates.json")  # –§–∞–π–ª –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
WEATHER_CACHE_FILE = os.path.expanduser("weather_cache.json")  # –§–∞–π–ª –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
TRUSTED_USERS_FILE = os.path.expanduser("trusted_users.json")  # –§–∞–π–ª –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MESSAGES_FILE = os.path.expanduser("messages.json")  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
DEFAULT_MONITORING_INTERVAL = 10800  # 3 —á–∞—Å–∞
WEATHER_CACHE_DURATION = 3600  # –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 1 —á–∞—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MESSAGE_RETENTION_DURATION = 24 * 3600  # –•—Ä–∞–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 24 —á–∞—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
NOMINATIM_URL = "https://nominatim.openstreetmap.org/search"
SECRET_PASSWORD = "3,141"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
ADMIN_ID = "1"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–µ–ª–µ–ø–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
SECRET_MENU_COMMAND = "kukushka"

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤–µ–Ω—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –°–†
SECRET_MODE_INSTRUCTIONS = """
üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ (–°–†)**

–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:

1. **/{secret_menu_command}** - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞. –í –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –°–†.
2. **/help** - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.
3. **/exit** - –í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –°–†, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
4. **–û–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º**:
   - –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ.
   - –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é (/{secret_menu_command}).

‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –°–† —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–µ.

–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –°–† –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit. –£–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä
""".format(secret_menu_command=SECRET_MENU_COMMAND)

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è-–≤—ã–∑–æ–≤–∞ (–û–í)
NOTIFICATION_PHRASES = [
    "–°–µ–≥–æ–¥–Ω—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: –í–æ–∑–¥—É—Ö —à–µ–ø—á–µ—Ç –æ –≤—Å—Ç—Ä–µ—á–µ!",
    "–ü–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º: –õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫ –∑–æ–≤–µ—Ç –≤–∞—Å!",
    "–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: –ù–µ–±–æ –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä!",
    "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –û–±–ª–∞–∫–∞ —à–µ–ø—á—É—Ç –æ –Ω–æ–≤–æ—Å—Ç—è—Ö!",
    "–ù–∞ —É–ª–∏—Ü–µ: –°–æ–ª–Ω—Ü–µ –∑–æ–≤–µ—Ç –≤–∞—Å –∫ –¥–∏–∞–ª–æ–≥—É!",
    "–í–∞—à –≥–æ—Ä–æ–¥: –î–æ–∂–¥—å –Ω–∞—à–µ–ø—Ç—ã–≤–∞–µ—Ç –æ –≤—Å—Ç—Ä–µ—á–µ!",
    "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è: –¢—É–º–∞–Ω —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–Ω—ã!",
    "–í –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ: –í–µ—Ç–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–µ—Å—Ç–∏!",
    "–ù–∞ —É–ª–∏—Ü–µ: –ó–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç –æ –Ω–æ–≤–æ—Å—Ç—è—Ö!",
    "–ü—Ä–æ–≥–Ω–æ–∑: –ì—Ä–æ–∑–∞ –∑–æ–≤–µ—Ç –∫ –æ–±—â–µ–Ω–∏—é!"
]

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
POSITIVE_PHRASES = [
    "–ê –≤ –°–æ—á–∏ —Å–µ–π—á–∞—Å +30, –ø–æ–¥—É–º–∞–π—Ç–µ –æ–± –æ—Ç–¥—ã—Ö–µ!",
    "–í –Ø–ª—Ç–µ —Å–æ–ª–Ω–µ—á–Ω–æ, +28, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!",
    "–í –ê–Ω–∞–ø–µ +27, –º–æ—Ä–µ –∑–æ–≤–µ—Ç!",
    "–í –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ +29, –ø–æ–¥—É–º–∞–π—Ç–µ –æ –ø–ª—è–∂–µ!",
    "–í –ö—Ä—ã–º—É +26, –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞!",
    "–í –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–µ +20, –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–∏–π!",
    "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ +18, —Å–æ–ª–Ω—Ü–µ —Ä–∞–¥—É–µ—Ç –≥–ª–∞–∑!",
    "–í –ö–∞–∑–∞–Ω–∏ +25, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É!",
    "–í –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ +22, –ø–æ–¥—É–º–∞–π—Ç–µ –æ –ø–∏–∫–Ω–∏–∫–µ!",
    "–í –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ +21, –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ!"
]

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏)
NEGATIVE_PHRASES = [
    "–ò–¥–µ—Ç —Å–µ–∑–æ–Ω –¥–æ–∂–¥–µ–π, –≥–æ—Ç–æ–≤—å –∑–æ–Ω—Ç–∏–∫!",
    "–ù–∞ —É–ª–∏—Ü–µ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –¥–µ—Ä–∂–∏ —à–∞–ø–∫—É!",
    "–î–æ–∂–¥—å –∑–∞—Ä—è–¥–∏–ª –Ω–∞–¥–æ–ª–≥–æ, –ø–ª–∞–Ω—ã –æ—Ç–º–µ–Ω—è—é—Ç—Å—è.",
    "–¢—É–º–∞–Ω —Å —É—Ç—Ä–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–Ω–æ.",
    "–°–Ω–µ–≥–æ–ø–∞–¥ –Ω–∞—á–∞–ª—Å—è, –¥–æ—Ä–æ–≥–∏ –∑–∞–º–µ–ª–æ.",
    "–ì—Ä–æ–∑–∞ —Ä–∞–∑—ã–≥—Ä–∞–ª–∞—Å—å, –ª—É—á—à–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞.",
    "–û–±–ª–∞–∫–∞ —Å–≥—É—Å—Ç–∏–ª–∏—Å—å, —Å–≤–µ—Ç–∞ –Ω–µ –≤–∏–¥–Ω–æ.",
    "–ü–æ–≥–æ–¥–∞ –∏—Å–ø–æ—Ä—Ç–∏–ª–∞—Å—å, –≤—Å—ë –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.",
    "–ú–æ—Ä–æ–∑ —É–¥–∞—Ä–∏–ª, –≤—Å—ë –∑–∞–º–µ—Ä–ª–æ –Ω–∞ –º–µ—Å—Ç–µ.",
    "–õ—É–Ω–∞ —Å–∫—Ä—ã–ª–∞—Å—å –∑–∞ —Ç—É—á–∞–º–∏, –Ω–æ—á—å —Ç–µ–º–Ω–∞."
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
monitoring_enabled = False
monitoring_interval = DEFAULT_MONITORING_INTERVAL
monitoring_job = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler –¥–ª—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
ADD_CITY = 0

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
ENTER_PASSWORD, SECRET_MODE, ENTER_CONTACT_ID, CHAT_MODE, ADD_USER_STEP1, ADD_USER_STEP2, CONFIRM_CONTACT = range(7)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
SPECIAL_CITY_NAMES = {
    "–Ω–æ—è–±—Ä—å—Å–∫": "noyabrsk",
    "–Ω—å—é-–π–æ—Ä–∫": "new york",
    "–ª—å–≤–æ–≤": "lviv",
    "–æ–¥–µ—Å—Å–∞": "odesa"
}

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò =====
def get_cities_file(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return os.path.expanduser(f"cities_{telegram_id}.json")

def load_cities(telegram_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cities_file = get_cities_file(telegram_id)
    try:
        if os.path.exists(cities_file):
            with open(cities_file, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è {telegram_id}: {e}")
    return []

def save_cities(telegram_id, cities):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cities_file = get_cities_file(telegram_id)
    try:
        with open(cities_file, "w", encoding="utf-8") as f:
            json.dump(cities, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è {telegram_id}: {e}")

def load_settings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global monitoring_enabled, monitoring_interval
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, "r") as f:
                settings = json.load(f)
                monitoring_enabled = settings.get("monitoring_enabled", False)
                monitoring_interval = settings.get("monitoring_interval", DEFAULT_MONITORING_INTERVAL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def save_settings():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = {
            "monitoring_enabled": monitoring_enabled,
            "monitoring_interval": monitoring_interval
        }
        with open(SETTINGS_FILE, "w") as f:
            json.dump(settings, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_coordinates():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(COORDINATES_FILE):
            with open(COORDINATES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
    return {}

def save_coordinates(coordinates):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        with open(COORDINATES_FILE, "w", encoding="utf-8") as f:
            json.dump(coordinates, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")

def load_weather_cache():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(WEATHER_CACHE_FILE):
            with open(WEATHER_CACHE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã: {e}")
    return {}

def save_weather_cache(weather_cache):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open(WEATHER_CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(weather_cache, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã: {e}")

def load_trusted_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not os.path.exists(TRUSTED_USERS_FILE):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            initial_users = {
                "1": {
                    "telegram_id": "7750281774",  # –†–µ–∞–ª—å–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    "in_session": False,
                    "in_secret_mode": False,
                    "message_ids": [],
                    "is_new_user": True
                }
            }
            with open(TRUSTED_USERS_FILE, "w", encoding="utf-8") as f:
                json.dump(initial_users, f, ensure_ascii=False, indent=2)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {TRUSTED_USERS_FILE} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {initial_users}")
        with open(TRUSTED_USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

def save_trusted_users(users):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(TRUSTED_USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_messages():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not os.path.exists(MESSAGES_FILE):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π
            with open(MESSAGES_FILE, "w", encoding="utf-8") as f:
                json.dump({}, f)
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª {MESSAGES_FILE}")
        with open(MESSAGES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

def save_messages(messages):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        with open(MESSAGES_FILE, "w", encoding="utf-8") as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π"""
    messages = load_messages()
    current_time = int(time.time())
    updated = False
    trusted_users = load_trusted_users()

    for recipient_id in list(messages.keys()):
        user_messages = messages[recipient_id]
        filtered_messages = []
        for msg in user_messages:
            if current_time - msg["timestamp"] < MESSAGE_RETENTION_DURATION:
                filtered_messages.append(msg)
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
                sender_id = msg["sender_id"]
                sender_telegram_id = get_telegram_id(sender_id)
                if sender_telegram_id:
                    sent_message = await context.bot.send_message(
                        chat_id=sender_telegram_id,
                        text=random.choice(NEGATIVE_PHRASES)
                    )
                    if sender_id in trusted_users:
                        trusted_users[sender_id]["message_ids"] = trusted_users[sender_id].get("message_ids", []) + [sent_message.message_id]
        if len(filtered_messages) != len(user_messages):
            updated = True
            if filtered_messages:
                messages[recipient_id] = filtered_messages
            else:
                del messages[recipient_id]

    if updated:
        save_messages(messages)
        save_trusted_users(trusted_users)

# ===== –ü–û–ì–û–î–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def validate_city(city):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞) –∏ —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    if len(city) < 3:
        return False
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã (–≤–∫–ª—é—á–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü—É), –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø\s-]+$', city):
        return False
    return True

def transliterate_city(city):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    lower_city = city.lower()
    if lower_city in SPECIAL_CITY_NAMES:
        return SPECIAL_CITY_NAMES[lower_city]
    try:
        return translit(city, "ru", reversed=True).replace(" ", "_").lower()
    except Exception:
        return city.lower()

def get_coordinates(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Nominatim —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not validate_city(city):
        return None

    coordinates_cache = load_coordinates()
    city_lower = city.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫—ç—à–µ
    if city_lower in coordinates_cache:
        logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city} –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ: {coordinates_cache[city_lower]}")
        return coordinates_cache[city_lower]

    # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç –≤ –∫—ç—à–µ, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Nominatim
    try:
        params = {"q": city, "format": "json", "limit": 1}
        headers = {"User-Agent": "WeatherBot/1.0 (pogodavd_bot@example.com)"}  # –£–∫–∞–∂–∏ —Å–≤–æ–π email
        response = requests.get(NOMINATIM_URL, params=params, headers=headers, timeout=10)
        data = response.json()

        if data and len(data) > 0:
            lat = float(data[0]["lat"])
            lon = float(data[0]["lon"])
            coordinates = {"lat": lat, "lon": lon}
            coordinates_cache[city_lower] = coordinates
            save_coordinates(coordinates_cache)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city}: lat={lat}, lon={lon}")
            return coordinates
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è {city}: {str(e)}")
        return None

def get_current_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not validate_city(city):
        return f"‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ '{city}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."

    weather_cache = load_weather_cache()
    city_lower = city.lower()
    current_time = int(time.time())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
    if city_lower in weather_cache:
        cached_data = weather_cache[city_lower]
        if current_time - cached_data["timestamp"] < WEATHER_CACHE_DURATION:
            logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è {city} –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ: {cached_data['weather']}")
            return cached_data["weather"]

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
    coordinates = get_coordinates(city)
    if not coordinates:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."

    lat = coordinates["lat"]
    lon = coordinates["lon"]

    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        data = response.json()

        if response.status_code == 200:
            temp = round(data["main"]["temp"])
            feels_like = round(data["main"]["feels_like"])
            description = data["weather"][0]["description"].capitalize()

            emoji = "üå§Ô∏è"
            if "—è—Å–Ω–æ" in description.lower():
                emoji = "‚òÄÔ∏è"
            elif "–¥–æ–∂–¥—å" in description.lower() or "–º–æ—Ä–æ—Å—å" in description.lower():
                emoji = "üåßÔ∏è"
            elif "—Å–Ω–µ–≥" in description.lower():
                emoji = "‚ùÑÔ∏è"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º city —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
            weather_message = (f"–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()}:\n"
                              f"{emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                              f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            weather_cache[city_lower] = {
                "timestamp": current_time,
                "weather": weather_message
            }
            save_weather_cache(weather_cache)

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è {city}: {temp}¬∞C, {description}")
            return weather_message
        else:
            error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap –¥–ª—è {city}: {error_message}")
            return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}. –û—à–∏–±–∫–∞: {error_message}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap –¥–ª—è {city}: {str(e)}")
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}. –û—à–∏–±–∫–∞: {str(e)}"

def get_forecast(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π —Å OpenWeatherMap"""
    if not validate_city(city):
        return f"‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ '{city}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."

    coordinates = get_coordinates(city)
    if not coordinates:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."

    lat = coordinates["lat"]
    lon = coordinates["lon"]

    try:
        url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        data = response.json()

        if response.status_code == 200 and "list" in data:
            forecast = []
            for item in data["list"][::8][:5]:  # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (—à–∞–≥ 8, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
                date_str = item["dt_txt"].split()[0]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ü–Ω, –í—Ç, –°—Ä –∏ —Ç.–¥.)
                day_of_week = date_obj.strftime("%a")  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                days_of_week = {
                    "Mon": "–ü–Ω",
                    "Tue": "–í—Ç",
                    "Wed": "–°—Ä",
                    "Thu": "–ß—Ç",
                    "Fri": "–ü—Ç",
                    "Sat": "–°–±",
                    "Sun": "–í—Å"
                }
                day_of_week = days_of_week.get(day_of_week, day_of_week)

                temp = round(item["main"]["temp"])
                desc = item["weather"][0]["description"].capitalize()

                emoji = "üå§Ô∏è"
                if "—è—Å–Ω–æ" in desc.lower():
                    emoji = "‚òÄÔ∏è"
                elif "–¥–æ–∂–¥—å" in desc.lower() or "–º–æ—Ä–æ—Å—å" in desc.lower():
                    emoji = "üåßÔ∏è"
                elif "—Å–Ω–µ–≥" in desc.lower():
                    emoji = "‚ùÑÔ∏è"

                forecast.append(f"{day_of_week}, {date_str}: {temp}¬∞C {emoji}, {desc}")

            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}")
            return "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π:\n" + "\n".join(forecast)
        else:
            error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap –¥–ª—è {city}: {error_message}")
            return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}. –û—à–∏–±–∫–∞: {error_message}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap –¥–ª—è {city}: {str(e)}")
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}. –û—à–∏–±–∫–∞: {str(e)}"

# ===== –§–£–ù–ö–¶–ò–ò –°–ö–†–´–¢–û–ì–û –†–ï–ñ–ò–ú–ê =====
def get_user_id(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    trusted_users = load_trusted_users()
    for user_id, user_data in trusted_users.items():
        if user_data["telegram_id"] == str(telegram_id):
            return user_id
    return None

def get_telegram_id(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID"""
    trusted_users = load_trusted_users()
    if user_id in trusted_users:
        return trusted_users[user_id]["telegram_id"]
    return None


async def zvon_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /zvon –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /zvon –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    telegram_id = str(update.effective_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º trusted_users –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    trusted_users = load_trusted_users()
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ trusted_users: {trusted_users}")
    
    user_id = get_user_id(telegram_id)
    logger.info(f"–ù–∞–π–¥–µ–Ω user_id –¥–ª—è telegram_id {telegram_id}: {user_id}")
    
    if not user_id:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ trusted_users")
        await update.message.reply_text("üñïüñïüñï")
        return ConversationHandler.END

    trusted_users[user_id]["message_ids"].append(
        update.message_id if isinstance(update, Message) else update.message.message_id)

    # –û—á–∏—â–∞–µ–º context.user_data –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –°–†
    context.user_data.clear()
    context.user_data["user_id"] = user_id
    context.user_data["chat_id"] = update.message.chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã context.user_data: user_id={user_id}, chat_id={update.message.chat_id}")
    
    answer = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    trusted_users[user_id]["message_ids"].append(answer.message_id)
    save_trusted_users(trusted_users)
    return ENTER_PASSWORD


async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º"""
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if user_id:
        trusted_users[user_id]["message_ids"].append(
            update.message_id if isinstance(update, Message) else update.message.message_id)
    password = update.message.text.strip()
    if password != SECRET_PASSWORD:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return ConversationHandler.END

    if not user_id:
        logger.error(f"user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.user_data: {context.user_data}")
        answer = await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /zvon.")
        trusted_users[user_id]["message_ids"].append(answer.message_id)
        save_trusted_users(trusted_users)
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    trusted_users[user_id]["in_secret_mode"] = True
    trusted_users[user_id]["in_session"] = True
    trusted_users[user_id]["message_ids"] = trusted_users[user_id].get("message_ids", [])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–∏—á–∫–æ–º (–ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥)
    is_new_user = trusted_users[user_id].get("is_new_user", True)
    if is_new_user:
        trusted_users[user_id]["is_new_user"] = False  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫
    save_trusted_users(trusted_users)

    context.user_data["in_secret_mode"] = True
    context.user_data["chat_active"] = False
    context.user_data["current_contact"] = None
    context.user_data["has_replied"] = False

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    if is_new_user:
        sent_message = await update.message.reply_text(SECRET_MODE_INSTRUCTIONS)
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    messages = load_messages()
    if user_id in list(messages.keys()) and messages[user_id]:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        if messages.get(user_id):
            last_sender_id = messages[user_id][-1]["sender_id"]

            context.user_data["pending_contact"] = last_sender_id
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data=f"confirm_contact_{last_sender_id}"),
                 InlineKeyboardButton("–ù–µ—Ç", callback_data="decline_contact")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await update.message.reply_text(
                f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å ID {last_sender_id}?", reply_markup=reply_markup
            )
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)
            save_trusted_users(trusted_users)
            return CONFIRM_CONTACT
    else:
        sent_message = await update.message.reply_text(
            f"–í—ã –≤–æ—à–ª–∏ –≤ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é."
        )
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return SECRET_MODE

async def confirm_contact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice.startswith("confirm_contact_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        messages = load_messages()
        for msg in messages[user_id]:
            if msg["is_photo"]:
                sent_message = await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat.id,
                    photo=msg["photo_id"],
                    caption=f"ID {msg['sender_id']}: [–§–æ—Ç–æ]"
                )
            else:
                sent_message = await context.bot.send_message(
                    chat_id=update.callback_query.message.chat.id,
                    text=f"ID {msg['sender_id']}: {msg['message']}"
                )
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)

            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ)
            try:
                msg["delivered"] = True
                sender_id = msg["sender_id"]
                sender_telegram_id = get_telegram_id(sender_id)
                if sender_telegram_id and not trusted_users[sender_id].get("in_secret_mode", False):
                    sent_message = await context.bot.send_message(
                        chat_id=sender_telegram_id,
                        text=random.choice(POSITIVE_PHRASES)
                    )
                    trusted_users[sender_id]["message_ids"] = trusted_users[sender_id].get("message_ids", []) + [sent_message.message_id]
            except Exception as err:
                print(err)

        # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages[user_id] = [msg for msg in messages[user_id] if not msg["delivered"]]
        if not messages[user_id]:
            del messages[user_id]
        save_messages(messages)
        save_trusted_users(trusted_users)
        contact_id = choice.replace("confirm_contact_", "")
        trusted_users[user_id]["current_contact"] = contact_id
        trusted_users[user_id]["chat_active"] = True
        save_trusted_users(trusted_users)

        sent_message = await query.message.edit_text(
            f"–ö–∞–Ω–∞–ª —Å ID {contact_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é."
        )
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return CHAT_MODE
    elif choice == "decline_contact":
        sent_message = await query.message.edit_text(
            f"–í—ã –≤–æ—à–ª–∏ –≤ —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é."
        )
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return SECRET_MODE

    return SECRET_MODE


async def show_secret_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_mode=None) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /kukushka –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if user_id:
        trusted_users[user_id]["message_ids"].append(
            update.message_id if isinstance(update, Message) else update.message.message_id)
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ
    if chat_mode is None:
        chat_mode = trusted_users[user_id].get("chat_active", False)

    keyboard = [
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç", callback_data="secret_contact")],
        [InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="secret_exit")]
    ]
    if user_id == ADMIN_ID:
        keyboard.insert(1, [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="secret_add_user")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    sent_message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if not chat_mode else "–í—ã –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    context.user_data["menu_message_id"] = sent_message.message_id
    trusted_users[user_id]["message_ids"].append(sent_message.message_id)
    save_trusted_users(trusted_users)
    return CHAT_MODE if chat_mode else SECRET_MODE


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if user_id:
        trusted_users[user_id]["message_ids"].append(update.message_id if isinstance(update, Message) else update.message.message_id)
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    sent_message = await update.message.reply_text(SECRET_MODE_INSTRUCTIONS)
    trusted_users[user_id]["message_ids"].append(sent_message.message_id)
    save_trusted_users(trusted_users)
    return SECRET_MODE if not trusted_users[user_id].get("chat_active", False) else CHAT_MODE


async def secret_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ"""
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "secret_contact":
        if user_id == ADMIN_ID:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
            keyboard = [[InlineKeyboardButton(user_id, callback_data=f"contact_{user_id}")] for user_id in trusted_users.keys() if user_id != ADMIN_ID]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="secret_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        else:
            sent_message = await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:")
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)
            save_trusted_users(trusted_users)
            return ENTER_CONTACT_ID
    elif choice.startswith("contact_"):
        contact_id = choice.replace("contact_", "")
        trusted_users[user_id]["current_contact"] = contact_id
        trusted_users[user_id]["chat_active"] = True
        save_trusted_users(trusted_users)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
        contact_telegram_id = trusted_users[contact_id]["telegram_id"]
        if not trusted_users[contact_id].get("in_secret_mode", False):
            notification = await context.bot.send_message(
                chat_id=contact_telegram_id,
                text=random.choice(NOTIFICATION_PHRASES)
            )
            trusted_users[contact_id]["last_notification_id"] = notification.message_id
            trusted_users[contact_id]["message_ids"] = trusted_users[contact_id].get("message_ids", []) + [notification.message_id]
            save_trusted_users(trusted_users)

        sent_message = await query.message.edit_text(f"–ö–∞–Ω–∞–ª —Å ID {contact_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return CHAT_MODE
    elif choice == "secret_back":
        sent_message = await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return SECRET_MODE
    elif choice == "secret_add_user":
        if user_id != ADMIN_ID:
            sent_message = await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)
            save_trusted_users(trusted_users)
            return SECRET_MODE
        sent_message = await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return ADD_USER_STEP1
    elif choice == "secret_exit":
        return await exit_secret_mode(update.callback_query.message, context)

    return SECRET_MODE

async def enter_contact_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    contact_id = update.message.text.strip()
    if contact_id not in trusted_users:
        sent_message = await update.message.reply_text("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return await show_secret_menu(update, context)

    if contact_id == user_id:
        sent_message = await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return await show_secret_menu(update, context)

    trusted_users[user_id]["current_contact"] = contact_id
    trusted_users[user_id]["chat_active"] = True
    save_trusted_users(trusted_users)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
    contact_telegram_id = trusted_users[contact_id]["telegram_id"]
    if not trusted_users[contact_id].get("in_secret_mode", False):
        notification = await context.bot.send_message(
            chat_id=contact_telegram_id,
            text=random.choice(NOTIFICATION_PHRASES)
        )
        trusted_users[contact_id]["last_notification_id"] = notification.message_id
        trusted_users[contact_id]["message_ids"] = trusted_users[contact_id].get("message_ids", []) + [notification.message_id]
        save_trusted_users(trusted_users)

    sent_message = await update.message.reply_text(f"–ö–∞–Ω–∞–ª —Å ID {contact_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
    trusted_users[user_id]["message_ids"].append(sent_message.message_id)
    save_trusted_users(trusted_users)
    return CHAT_MODE

async def add_user_step1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    telegram_id = update.message.text.strip()
    context.user_data["new_user_telegram_id"] = telegram_id
    save_trusted_users(trusted_users)

    new_user_id = str(int(list(trusted_users.keys())[-1]) + 1)

    trusted_users[new_user_id] = {
        "telegram_id": telegram_id,
        "in_session": False,
        "in_secret_mode": False,
        "message_ids": [],
        "is_new_user": True  # –û—Ç–º–µ—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∞
    }
    save_trusted_users(trusted_users)
    sent_message = await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    trusted_users[user_id]["message_ids"].append(sent_message.message_id)
    save_trusted_users(trusted_users)
    return await show_secret_menu(update, context)


async def chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ"""
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        return ConversationHandler.END

    trusted_users[user_id]["message_ids"].append(
        update.message_id if isinstance(update, Message) else update.message.message_id)

    contact_id = trusted_users[user_id].get("current_contact")
    if not trusted_users[user_id].get("chat_active") or not contact_id:
        sent_message = await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kukushka –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return SECRET_MODE

    if contact_id not in trusted_users:
        sent_message = await update.message.reply_text("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        trusted_users[user_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)
        return await exit_secret_mode(update.message, context)

    contact_telegram_id = trusted_users[contact_id]["telegram_id"]
    message_text = update.message.text if update.message.text else None
    photo = update.message.photo[-1] if update.message.photo else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message_text and message_text.startswith('/'):
        return CHAT_MODE  # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
    messages = load_messages()
    if contact_id not in messages:
        messages[contact_id] = []

    if not trusted_users[contact_id].get("chat_active"):
        if message_text:
            messages[contact_id].append({
                "sender_id": user_id,
                "message": message_text,
                "is_photo": False,
                "photo_id": None,
                "timestamp": int(time.time()),
                "delivered": False
            })
        elif photo:
            messages[contact_id].append({
                "sender_id": user_id,
                "message": "[–§–æ—Ç–æ]",
                "is_photo": True,
                "photo_id": photo.file_id,
                "timestamp": int(time.time()),
                "delivered": False
            })
        else:
            sent_message = await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.")
            trusted_users[user_id]["message_ids"].append(sent_message.message_id)
            save_trusted_users(trusted_users)
            return CHAT_MODE
    else:
        ...

    save_messages(messages)
    await cleanup_old_messages(context)

    # –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if trusted_users[contact_id].get("in_secret_mode", False):
        if message_text:
            sent_message = await context.bot.send_message(chat_id=contact_telegram_id, text=f"ID {user_id}: {message_text}")
            trusted_users[contact_id]["message_ids"].append(sent_message.message_id)
        elif photo:
            sent_message = await context.bot.send_photo(chat_id=contact_telegram_id, photo=photo.file_id, caption=f"ID {user_id}: [–§–æ—Ç–æ]")
            trusted_users[contact_id]["message_ids"].append(sent_message.message_id)
        save_trusted_users(trusted_users)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    trusted_users[user_id]["has_replied"] = True
    save_trusted_users(trusted_users)

    return CHAT_MODE


async def exit_secret_mode(message: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if isinstance(message, Update):
        message = message.message
    else:
        ...
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /exit –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    trusted_users = load_trusted_users()
    user_id = context.user_data.get("user_id")
    trusted_users[user_id]["message_ids"].append(message.message_id)
    if not user_id or not trusted_users[user_id].get("in_secret_mode", False):
        save_trusted_users(trusted_users)
        return ConversationHandler.END

    chat_id = context.user_data.get("chat_id", message.chat_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –≤ —á–∞—Ç–µ
    if trusted_users[user_id].get("chat_active"):
        contact_id = trusted_users[user_id]["current_contact"]
        if contact_id in trusted_users and trusted_users[contact_id].get("in_secret_mode", False):
            contact_telegram_id = trusted_users[contact_id]["telegram_id"]
            keyboard = [[InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="secret_exit")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await context.bot.send_message(
                chat_id=contact_telegram_id,
                text=f"–°–µ—Å—Å–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞. ID {user_id} –≤—ã—à–µ–ª.",
                reply_markup=reply_markup
            )
            trusted_users[contact_id]["message_ids"].append(sent_message.message_id)

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–í –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            if trusted_users[user_id].get("has_replied", False):
                sender_telegram_id = get_telegram_id(user_id)
                if sender_telegram_id and not trusted_users[user_id].get("in_secret_mode", False):
                    sent_message = await context.bot.send_message(
                        chat_id=sender_telegram_id,
                        text=random.choice(NOTIFICATION_PHRASES)
                    )
                    trusted_users[user_id]["message_ids"].append(sent_message.message_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –°–†
    for message_id in trusted_users[user_id].get("message_ids", []):
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    trusted_users[user_id]["in_secret_mode"] = False
    trusted_users[user_id]["in_session"] = False
    trusted_users[user_id]["chat_active"] = False
    trusted_users[user_id]["current_contact"] = None
    trusted_users[user_id]["has_replied"] = False
    trusted_users[user_id]["message_ids"] = []
    save_trusted_users(trusted_users)

    context.user_data.clear()
    await set_right_button(message, context)
    return ConversationHandler.END


# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–ì–û–î–ù–û–ì–û –ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    global monitoring_job
    await set_main_menu(context)
    load_settings()

    if monitoring_enabled and not monitoring_job:
        monitoring_job = context.job_queue.run_repeating(
            monitor_weather,
            interval=monitoring_interval,
            first=0,
            chat_id=update.message.chat_id
        )
    reply_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥(–∞)', callback_data='add_city')]])
    await update.message.reply_text('üå§ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –±–æ—Ç –ø–æ–≥–æ–¥—ã –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', reply_markup=reply_markup)
    #await set_right_button(update.message, context)

async def set_main_menu(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
    commands = [
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("addcity", "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"),
        BotCommand("forecast", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π"),
        BotCommand("removecity", "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand("monitoron", "–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
        BotCommand("monitoroff", "–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    ]
    await context.bot.set_my_commands(commands)

async def set_right_button(message: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞'"""
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞'")
    reply_markup = ReplyKeyboardMarkup([["–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"]], resize_keyboard=True)
    await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def monitor_weather(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã"""
    chat_id = context.job.chat_id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ job
    cities = load_cities(chat_id)
    for city in cities:
        weather = get_current_weather(city)
        if "‚ö†Ô∏è" not in weather:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await context.bot.send_message(chat_id=chat_id, text=weather)

async def monitor_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /monitoron")
    global monitoring_enabled, monitoring_job
    if monitoring_enabled:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω!")
        return

    monitoring_enabled = True
    save_settings()
    
    if not monitoring_job:
        monitoring_job = context.job_queue.run_repeating(
            monitor_weather,
            interval=monitoring_interval,
            first=0,
            chat_id=update.message.chat_id  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –Ω–∞–ø—Ä—è–º—É—é
        )
    
    await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω! –ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {monitoring_interval // 3600} —á–∞—Å–æ–≤.")
    await set_right_button(update.message, context)

async def monitor_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /monitoroff")
    global monitoring_enabled, monitoring_job
    if not monitoring_enabled:
        await update.message.reply_text("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω!")
        return

    monitoring_enabled = False
    save_settings()
    
    if monitoring_job:
        monitoring_job.schedule_removal()
        monitoring_job = None
    
    await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω!")
    await set_right_button(update.message, context)

async def add_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /addcity")
    context.user_data['state'] = 'add_city'
    if update.message:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    else:
        await update.callback_query.message.chat.send_message("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())
    return ADD_CITY

async def save_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {update.message.text}")
    if 'state' not in context.user_data or context.user_data['state'] != 'add_city':
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return -1

    city = update.message.text.strip()
    telegram_id = str(update.effective_user.id)
    cities = load_cities(telegram_id)

    if not city:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    city_display = city.capitalize()
    city_lower = city.lower()

    if city_lower in [c.lower() for c in cities]:
        await update.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city_display} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")
    else:
        cities.append(city_display)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
        save_cities(telegram_id, cities)
        weather = get_current_weather(city_display)
        await update.message.reply_text(f"‚úÖ {city_display} –¥–æ–±–∞–≤–ª–µ–Ω!\n{weather}")

    context.user_data.pop('state', None)
    await set_right_button(update.message, context)
    return -1

async def remove_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /removecity")
    telegram_id = str(update.effective_user.id)
    cities = load_cities(telegram_id)
    if not cities:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = [[InlineKeyboardButton(city, callback_data=f"remove_{city}")] for city in cities]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def confirm_remove_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
    query = update.callback_query
    await query.answer()
    city = query.data.replace("remove_", "")

    telegram_id = str(query.from_user.id)
    cities = load_cities(telegram_id)
    if city in cities:
        cities.remove(city)
        save_cities(telegram_id, cities)
        await query.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª–µ–Ω!")
    else:
        await query.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!")

    await set_right_button(query.message, context)

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /forecast")
    telegram_id = str(update.effective_user.id)
    cities = load_cities(telegram_id)
    if not cities:
        await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ /addcity")
        return

    keyboard = [[InlineKeyboardButton(city, callback_data=f"forecast_{city}")] for city in cities]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=reply_markup)

async def show_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.info("–ü–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    query = update.callback_query
    await query.answer()
    city = query.data.replace("forecast_", "")
    await query.message.reply_text(get_forecast(city))
    await set_right_button(query.message, context)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /reset")
    global monitoring_job
    if monitoring_job:
        monitoring_job.schedule_removal()
        monitoring_job = None

    telegram_id = str(update.effective_user.id)
    try:
        cities_file = get_cities_file(telegram_id)
        if os.path.exists(cities_file):
            os.remove(cities_file)
        if os.path.exists(SETTINGS_FILE):
            os.remove(SETTINGS_FILE)
        if os.path.exists(COORDINATES_FILE):
            os.remove(COORDINATES_FILE)
        if os.path.exists(WEATHER_CACHE_FILE):
            os.remove(WEATHER_CACHE_FILE)
        if os.path.exists(TRUSTED_USERS_FILE):
            os.remove(TRUSTED_USERS_FILE)
        if os.path.exists(MESSAGES_FILE):
            os.remove(MESSAGES_FILE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")

    # –û—á–∏—â–∞–µ–º context.user_data
    context.user_data.clear()

    await update.message.reply_text("üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    await set_right_button(update.message, context)

async def show_cities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞'")
    telegram_id = str(update.effective_user.id)
    cities = load_cities(telegram_id)
    if not cities:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcity")
        return

    keyboard = [[InlineKeyboardButton(city, callback_data=f"weather_{city}")] for city in cities]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

async def show_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.info("–ü–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    query = update.callback_query
    await query.answer()
    city = query.data.replace("weather_", "")
    await query.message.reply_text(get_current_weather(city))
    await set_right_button(query.message, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cancel")
    context.user_data.pop('state', None)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await set_right_button(update.message, context)
    return -1

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start.")
        await set_right_button(update.message, context)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====
async def debug_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    if 'state' not in context.user_data:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, /addcity –∏–ª–∏ /forecast.")
        await set_right_button(update.message, context)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ PogodaVD")
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("7411644273:AAFET7Xz-w9iIi2D53XxPDlWWdluCKPe58s").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    #application.add_error_handler(error_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("monitoron", monitor_on))
    application.add_handler(CommandHandler("monitoroff", monitor_off))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    application.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addcity", add_city),
            CallbackQueryHandler(add_city, pattern='add_city')
        ],
        states={
            ADD_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_city)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    application.add_handler(CommandHandler("removecity", remove_city))
    application.add_handler(CallbackQueryHandler(confirm_remove_city, pattern="^remove_"))

    # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
    application.add_handler(CommandHandler("forecast", forecast))
    application.add_handler(CallbackQueryHandler(show_forecast, pattern="^forecast_"))

    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"
    application.add_handler(MessageHandler(filters.Regex("^–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞$"), show_cities))
    application.add_handler(CallbackQueryHandler(show_weather, pattern="^weather_"))

    # –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
    application.add_handler(ConversationHandler(
        entry_points=[CommandHandler("zvon", zvon_start)],
        states={
            ENTER_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_password)],
            SECRET_MODE: [
                CallbackQueryHandler(secret_mode_callback),
                CommandHandler(SECRET_MENU_COMMAND, show_secret_menu),
                CommandHandler("help", show_help),
                CommandHandler("exit", exit_secret_mode)
            ],
            ENTER_CONTACT_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_contact_id)],
            CHAT_MODE: [
                CommandHandler("exit", exit_secret_mode),
                CommandHandler("help", show_help),
                CommandHandler(SECRET_MENU_COMMAND, show_secret_menu),
                MessageHandler(filters.TEXT | filters.PHOTO, chat_mode),
            ],
            ADD_USER_STEP1: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_step1)],
            CONFIRM_CONTACT: [CallbackQueryHandler(confirm_contact_callback)]
        },
        fallbacks=[CallbackQueryHandler(secret_mode_callback, pattern="^secret_")],
        per_message=False
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü, –∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã)
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, debug_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )


if __name__ == "__main__":
    main()
